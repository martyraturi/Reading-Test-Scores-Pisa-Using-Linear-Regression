#Problem 1.1 - Dataset size
#Load the training and testing sets using the read.csv() function, and save them as variables with the names pisaTrain and pisaTest.
#How many students are there in the training set?



pisaTrain <- read.csv(file.choose())
pisaTest <- read.csv(file.choose())

str(pisaTrain)



#Problem 1.2 - Summarizing the dataset
#Using tapply() on pisaTrain, what is the average reading test score of males?
#Of females?

tapply(pisaTrain$readingScore,pisaTrain$male,mean)

#Problem 1.3 - Locating missing values
#Which variables are missing data in at least one observation in the training set? Select all that apply.

summary(pisaTrain)

#Problem 1.4 - Removing missing values
#Linear regression discards observations with missing data, so we will remove all such observations from the training and testing sets. Later in the course, we will learn about imputation, which deals with missing data by filling in missing values with plausible information.
#Type the following commands into your R console to remove observations with any missing value from pisaTrain and pisaTest:
  
pisaTrain = na.omit(pisaTrain)
pisaTest = na.omit(pisaTest)

#How many observations are now in the training set?

str(pisaTrain)

#How many observations are now in the testing set?

str(pisaTest)


#Factor variables are variables that take on a discrete set of values, like the "Region" variable in the WHO dataset from the second lecture of Unit 1. This is an unordered factor because there isn't any natural ordering between the levels. An ordered factor has a natural ordering between the levels (an example would be the classifications "large," "medium," and "small").
#Which of the following variables is an unordered factor with at least 3 levels? (Select all that apply.)
#vWhich of the following variables is an ordered factor with at least 3 levels? (Select all that apply.)

#Problem 3.1 - Building a model
#Because the race variable takes on text values, 
#it was loaded as a factor variable when we read in 
#the dataset with read.csv() -- you can see this when you run str(pisaTrain) or str(pisaTest). However, by default R selects the first level alphabetically ("American Indian/Alaska Native") as the reference level of our factor instead of the most common level ("White"). 
#Set the reference level of the factor by typing the following two lines in your R console:

pisaTrain$raceeth = relevel(pisaTrain$raceeth, "White")
pisaTest$raceeth = relevel(pisaTest$raceeth, "White")


#Now, build a linear regression model (call it lmScore) using the training set to predict readingScore using all the remaining variables.
#It would be time-consuming to type all the variables, but R provides the shorthand notation "readingScore ~ ." to mean "predict readingScore using all the other variables in the data frame." The period is used to replace listing out all of the independent variables. As an example, if your dependent variable is called "Y", your independent variables are called "X1", "X2", and "X3", and your training data set is called "Train", instead of the regular notation:
#LinReg = lm(Y ~ X1 + X2 + X3, data = Train)
#You would use the following command to build your model:
#LinReg = lm(Y ~ ., data = Train)
#What is the Multiple R-squared value of lmScore on the training set?

lmScore = lm(readingScore ~., data = pisaTrain)

#What is the Multiple R-squared value of lmScore on the training set?

summary(lmScore)

#Problem 3.2 - Computing the root-mean squared error of the model
#What is the training-set root-mean squared error (RMSE) of lmScore?


RMSE = sqrt(mean(lmScore$residuals^2))
RMSE

#Problem 4.1 - Predicting on unseen data
#Using the "predict" function and supplying the "newdata" argument, use the lmScore model to predict the reading scores of students in pisaTest. Call this vector of predictions "predTest". Do not change the variables in the model (for example, do not remove variables that we found were not significant in the previous part of this problem). Use the summary function to describe the test set predictions.
#What is the range between the maximum and minimum predicted reading score on the test set?

predTest <- predict(lmScore, newdata = pisaTest)
summary(predTest)

#Problem 4.2 - Test set SSE and RMSE
#What is the sum of squared errors (SSE) of lmScore on the testing set?
 
SSE = sum((predTest - pisaTest$readingScore)^2) 
SSE
#What is the root-mean squared error (RMSE) of lmScore on the testing set?

RMSE = sqrt(mean((predTest- pisaTest$readingScore)^2))
RMSE


#Problem 4.3 - Baseline prediction and test-set SSE
#What is the predicted test score used in the baseline model? Remember to compute this value using the training set and not the test set.

baseline = mean(pisaTrain$readingScore)
baseline
#What is the sum of squared errors of the baseline model on the testing set? HINT: We call the sum of squared errors for the baseline model the total sum of squares (SST).

SST = sum((baseline - pisaTest$readingScore)^2)
SST

#Problem 4.4 - Test-set R-squared
#What is the test-set R-squared value of lmScore?

R = 1-SSE/SST
R
















